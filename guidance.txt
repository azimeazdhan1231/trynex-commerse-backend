
# TryneX Deployment Guide

## Frontend Deployment (Netlify)

### Prerequisites
- GitHub account
- Netlify account
- Node.js project ready

### Step 1: Prepare Frontend for Deployment
1. Create a separate frontend build configuration
2. Update build settings for production

### Step 2: GitHub Repository Setup
```bash
# Initialize git in your project root
git init
git add .
git commit -m "Initial TryneX commit"

# Create GitHub repository and push
git remote add origin https://github.com/yourusername/trynex-frontend.git
git branch -M main
git push -u origin main
```

### Step 3: Netlify Deployment
1. Login to Netlify (https://netlify.com)
2. Click "New site from Git"
3. Connect your GitHub account
4. Select your repository
5. Configure build settings:
   - **Build command**: `npm run build`
   - **Publish directory**: `dist/public`
   - **Base directory**: Leave empty or set to `client`

### Step 4: Environment Variables (Netlify)
Add these in Netlify dashboard → Site settings → Environment variables:
```
VITE_API_URL=https://your-render-backend.onrender.com
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

---

## Backend Deployment (Render)

### Prerequisites
- GitHub account with backend code
- Render account
- Database setup (Supabase/Neon)

### Step 1: Prepare Backend
Ensure your backend has these files configured:
- `package.json` with proper scripts
- Environment variables setup
- Database connection ready

### Step 2: Render Deployment
1. Login to Render (https://render.com)
2. Click "New" → "Web Service"
3. Connect your GitHub repository
4. Configure deployment:
   - **Name**: trynex-backend
   - **Environment**: Node
   - **Build Command**: `npm run build`
   - **Start Command**: `npm start`
   - **Instance Type**: Free tier

### Step 3: Environment Variables (Render)
Add these in Render dashboard → Environment:
```
NODE_ENV=production
DATABASE_URL=your_postgresql_connection_string
SESSION_SECRET=your_session_secret_key
PORT=10000
```

### Step 4: Database Setup Options

#### Option A: Supabase (Recommended)
1. Create project at https://supabase.com
2. Get connection string from Settings → Database
3. Use the connection string in `DATABASE_URL`

#### Option B: Neon
1. Create project at https://neon.tech
2. Get connection string
3. Use in `DATABASE_URL`

---

## Build Configuration Files

### Frontend Build Script (package.json)
Ensure your package.json has:
```json
{
  "scripts": {
    "build": "vite build",
    "preview": "vite preview"
  }
}
```

### Backend Build Script (package.json)
Ensure your package.json has:
```json
{
  "scripts": {
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js"
  }
}
```

---

## Custom Domain Setup (Optional)

### Netlify Custom Domain
1. Go to Site settings → Domain management
2. Add custom domain
3. Update DNS records as instructed

### Render Custom Domain
1. Go to Settings → Custom Domains
2. Add your domain
3. Update DNS records

---

## Troubleshooting

### Common Issues:
1. **Build fails**: Check node version compatibility
2. **API not connecting**: Verify CORS settings and environment variables
3. **Database connection**: Ensure DATABASE_URL is correct
4. **Static files not loading**: Check build output directory

### Environment Variables Checklist:
- ✅ Frontend: VITE_API_URL points to Render backend
- ✅ Backend: DATABASE_URL is set correctly
- ✅ Backend: NODE_ENV=production
- ✅ Both: All Supabase credentials if used

---

## Post-Deployment Steps

1. Test all API endpoints
2. Verify database connections
3. Check frontend-backend communication
4. Test payment integration (if applicable)
5. Monitor logs for any errors

### Monitoring:
- Netlify: Check Functions tab for logs
- Render: Check Logs tab in dashboard
- Database: Monitor connections in Supabase/Neon dashboard

This setup provides a fully functional e-commerce platform with frontend on Netlify and backend on Render's free tier.
